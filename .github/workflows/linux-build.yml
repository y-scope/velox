# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Linux Build using GCC

on:
  push:
    branches: [presto-0.293-clp-connector]
    paths:
      - "velox/**"
      - "!velox/docs/**"
      - "CMakeLists.txt"
      - "CMake/**"
      - "third_party/**"
      - "scripts/setup-ubuntu.sh"
      - "scripts/setup-common.sh"
      - "scripts/setup-versions.sh"
      - "scripts/setup-helper-functions.sh"
      - ".github/workflows/linux-build.yml"
      - ".github/workflows/linux-build-base.yml"

  pull_request:
    paths:
      - "velox/**"
      - "!velox/docs/**"
      - "CMakeLists.txt"
      - "CMake/**"
      - "third_party/**"
      - "scripts/setup-common.sh"
      - "scripts/setup-versions.sh"
      - "scripts/setup-ubuntu.sh"
      - "scripts/setup-helper-functions.sh"
      - ".github/workflows/linux-build.yml"
      - ".github/workflows/linux-build-base.yml"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: "${{github.ref != 'refs/heads/presto-0.293-clp-connector'}}"

jobs:
  linux-gcc:
    name: Build with GCC
    runs-on: ubuntu-22.04
    env:
      CCACHE_DIR: "${{ github.workspace }}/ccache"
      USE_CLANG: "${{ 'false' }}"
    defaults:
      run:
        shell: bash
        working-directory: velox
    steps:
      - name: Node Cleanup
        working-directory: ${{ github.workspace }}
        run: |
          df -h
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker image prune --all --force
          sudo docker builder prune -a
          df -h
      - name: Get Ccache Stash
        uses: assignUser/stash/restore@v1
        with:
          path: '${{ env.CCACHE_DIR }}'
          key: ccache-ubuntu-debug-default-${{ inputs.use-clang && 'clang' || 'gcc' }}

      - name: Ensure Stash Dirs Exists
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p '${{ env.CCACHE_DIR }}'

      - uses: actions/checkout@v4
        with:
          path: velox

      - name: Install Core Dependencies
        run: |
          source scripts/setup-ubuntu.sh && install_apt_deps

      # - name: Install Docs Dependencies
      #   run: |
      #     dnf install -y --setopt=install_weak_deps=False pandoc
      #     pip3 install pipx
      #     pipx install --force uv cmake==3.31
      #     echo "PATH=$PATH:/github/home/.local/bin" >> $GITHUB_ENV
      #     which uv
      #     make python-venv
      #     which uv
      #     uv pip install -r scripts/docs-requirements.txt 

      - name: Clear CCache Statistics
        run: |
          ccache -sz

      - name: Check Headers
        run: |
          make header-fix

          if ! git diff --quiet; then
            diff=`git --no-pager diff`
            echo "Found missing License Header(s) in the following files:"
            git --no-pager diff --name-only
            echo "Check the Job summary for a copy-pasteable patch."

            echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
            echo "Found missing License Header(s)" >> $GITHUB_STEP_SUMMARY
            echo "> Please apply fix using:"  >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
            echo "patch -p1 <<EOF" >> $GITHUB_STEP_SUMMARY
            echo "$diff" >> $GITHUB_STEP_SUMMARY
            echo "EOF" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Format
        run: |
          make format-fix

          if ! git diff --quiet; then
            diff=`git --no-pager diff`
            echo "Found format issues in the following files:"
            git --no-pager diff --name-only
            echo "Check the Job summary for a copy-pasteable patch."

            echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
            echo "Found format issues" >> $GITHUB_STEP_SUMMARY
            echo "> Please apply fix using:"  >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
            echo "patch -p1 <<EOF" >> $GITHUB_STEP_SUMMARY
            echo "$diff" >> $GITHUB_STEP_SUMMARY
            echo "EOF" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Make Debug Build
        env:
          VELOX_DEPENDENCY_SOURCE: BUNDLED
          ICU_SOURCE: SYSTEM
          MAKEFLAGS: "NUM_THREADS=8 MAX_HIGH_MEM_JOBS=4 MAX_LINK_JOBS=3"
          EXTRA_CMAKE_FLAGS: "-DVELOX_ENABLE_ARROW=ON -DVELOX_ENABLE_PARQUET=ON -DVELOX_ENABLE_EXAMPLES=ON"
        run: |
          if [[ "${USE_CLANG}" = "true" ]]; then export CC=/usr/bin/clang-15; export CXX=/usr/bin/clang++-15; fi
          make cmake BUILD_DIR=debug BUILD_TYPE=Debug
          # Refer to presto_cpp/main/CMakeLists.txt for the list of Velox targets need to build
          cmake --build _build/debug -j $(getconf _NPROCESSORS_ONLN) \
            velox_abfs \
            velox_aggregates \
            velox_caching \
            velox_common_base \
            velox_core \
            velox_dwio_common_exception \
            velox_dwio_dwrf_reader \
            velox_dwio_dwrf_writer \
            velox_dwio_orc_reader \
            velox_dwio_parquet_reader \
            velox_dwio_parquet_writer \
            velox_encode \
            velox_exec \
            velox_file \
            velox_functions_lib \
            velox_functions_prestosql \
            velox_gcs \
            velox_hdfs \
            velox_hive_connector \
            velox_hive_iceberg_splitreader \
            velox_hive_partition_function \
            velox_presto_serializer \
            velox_s3fs \
            velox_serialization \
            velox_time \
            velox_type_parser \
            velox_type \
            velox_type_fbhive \
            velox_type_tz \
            velox_vector \
            velox_window

      # - name: Build Docs
      #   run: |
      #     source .venv/bin/activate
      #     cd velox/docs
      #     make clean
      #     make html

      - name: CCache after
        run: |
          ccache -vs

      - uses: assignUser/stash/save@v1
        with:
          path: '${{ env.CCACHE_DIR }}'
          key: ccache-ubuntu-debug-default-${{ inputs.use-clang && 'clang' || 'gcc' }}

      # FIXME: Since we only part of the targets, but the command following will run all tests
      # which may test targets that we didn't built. So we skip this for now.
      # - name: Run Tests
      #   run: |
      #     cd _build/debug && ctest -j 8 --output-on-failure --no-tests=error
