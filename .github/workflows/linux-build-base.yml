# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Linux Build

on:
  workflow_call:
    inputs:
      use-clang:
        description: 'Use Clang to compile the project.'
        default: false
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: "${{github.ref != 'refs/heads/presto-0.293-clp-connector'}}"

jobs:
  ubuntu-debug:
    runs-on: 8-core-ubuntu-22.04
    name: "Ubuntu debug with resolve_dependency"
    env:
      CCACHE_DIR: "${{ github.workspace }}/ccache"
      USE_CLANG: "${{ inputs.use-clang && 'true' || 'false' }}"
    defaults:
      run:
        shell: bash
        working-directory: velox
    steps:

      - name: Get Ccache Stash
        uses: assignUser/stash/restore@v1
        with:
          path: '${{ env.CCACHE_DIR }}'
          key: ccache-ubuntu-debug-default-${{ inputs.use-clang && 'clang' || 'gcc' }}

      - name: Ensure Stash Dirs Exists
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p '${{ env.CCACHE_DIR }}'

      - uses: actions/checkout@v4
        with:
          path: velox

      - name: Install Core Dependencies
        run: |
          source scripts/setup-ubuntu.sh && install_apt_deps

      - name: Install Docs Dependencies
        run: |
          dnf install -y --setopt=install_weak_deps=False pandoc
          pip3 install pipx
          pipx install --force uv cmake==3.31
          echo "PATH=$PATH:/github/home/.local/bin" >> $GITHUB_ENV
          which uv
          make python-venv
          which uv
          uv pip install -r scripts/docs-requirements.txt 

      - name: Clear CCache Statistics
        run: |
          ccache -sz

      - name: Check Headers
        run: |
          make header-fix

          if ! git diff --quiet; then
            diff=`git --no-pager diff`
            echo "Found missing License Header(s) in the following files:"
            git --no-pager diff --name-only
            echo "Check the Job summary for a copy-pasteable patch."

            echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
            echo "Found missing License Header(s)" >> $GITHUB_STEP_SUMMARY
            echo "> Please apply fix using:"  >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
            echo "patch -p1 <<EOF" >> $GITHUB_STEP_SUMMARY
            echo "$diff" >> $GITHUB_STEP_SUMMARY
            echo "EOF" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Format
        run: |
          make format-fix

          if ! git diff --quiet; then
            diff=`git --no-pager diff`
            echo "Found format issues in the following files:"
            git --no-pager diff --name-only
            echo "Check the Job summary for a copy-pasteable patch."

            echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
            echo "Found format issues" >> $GITHUB_STEP_SUMMARY
            echo "> Please apply fix using:"  >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
            echo "patch -p1 <<EOF" >> $GITHUB_STEP_SUMMARY
            echo "$diff" >> $GITHUB_STEP_SUMMARY
            echo "EOF" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Make Debug Build
        env:
          VELOX_DEPENDENCY_SOURCE: BUNDLED
          ICU_SOURCE: SYSTEM
          MAKEFLAGS: "NUM_THREADS=8 MAX_HIGH_MEM_JOBS=4 MAX_LINK_JOBS=3"
          EXTRA_CMAKE_FLAGS: "-DVELOX_ENABLE_ARROW=ON -DVELOX_ENABLE_PARQUET=ON -DVELOX_ENABLE_EXAMPLES=ON"
        run: |
          if [[ "${USE_CLANG}" = "true" ]]; then export CC=/usr/bin/clang-15; export CXX=/usr/bin/clang++-15; fi
          make debug

      - name: Build Docs
        run: |
          source .venv/bin/activate
          cd velox/docs
          make clean
          make html

      - name: CCache after
        run: |
          ccache -vs

      - uses: assignUser/stash/save@v1
        with:
          path: '${{ env.CCACHE_DIR }}'
          key: ccache-ubuntu-debug-default-${{ inputs.use-clang && 'clang' || 'gcc' }}

      - name: Run Tests
        run: |
          cd _build/debug && ctest -j 8 --output-on-failure --no-tests=error
