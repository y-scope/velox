# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Linux Build

on:
  workflow_call:
    inputs:
      use-clang:
        description: Use Clang to compile the project.
        default: false
        required: false
        type: boolean

jobs:
  ubuntu-release:
    name: Ubuntu release with resolve_dependency
    runs-on: yscope-gh-runner
    env:
      CCACHE_DIR: ${{ github.workspace }}/ccache
      USE_CLANG: ${{ inputs.use-clang && 'true' || 'false' }}
      STASH_KEY: velox-ccache-ubuntu-release-${{ inputs.use-clang && 'clang' || 'gcc' }}-${{ github.repository }}-${{ github.ref_name }}
    defaults:
      run:
        shell: bash
        working-directory: velox
    steps:
      - uses: actions/checkout@v4
        with:
          path: velox
          persist-credentials: false

      - name: Ensure Stash Dirs Exists
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p "$CCACHE_DIR"

      - name: Get Release Build Ccache Stash
        run: |
          ~/yscache/restore.sh "$STASH_KEY" "$CCACHE_DIR"

      - name: Install Dependencies
        run: |
          source scripts/setup-ubuntu.sh && install_apt_deps

      - name: Clear CCache StatisticsMore actions
        run: |
          ccache -sz

      - name: Build Artifact
        env:
          VELOX_DEPENDENCY_SOURCE: BUNDLED
          ICU_SOURCE: SYSTEM
          MAKEFLAGS: MAX_HIGH_MEM_JOBS=4 MAX_LINK_JOBS=3
        run: |
          if [[ "${USE_CLANG}" = "true" ]]; then export CC=/usr/bin/clang-15; export CXX=/usr/bin/clang++-15; fi
          #make release
          make minimal

      - name: CCache after
        run: |
          ccache -vs

      - name: Save Release Build Ccache Stash
        run: |
          ~/yscache/save.sh "$STASH_KEY" "$CCACHE_DIR"

      # - name: Run Tests
      #   run: |
      #     cd _build/release && ctest -j $(getconf _NPROCESSORS_ONLN) --output-on-failure --no-tests=error
